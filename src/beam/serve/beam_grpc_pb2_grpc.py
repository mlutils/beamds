# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import beam_grpc_pb2 as beam__grpc__pb2


class BeamServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.query_algorithm = channel.unary_unary(
                '/beam_grpc.BeamService/query_algorithm',
                request_serializer=beam__grpc__pb2.method_request.SerializeToString,
                response_deserializer=beam__grpc__pb2.pickled_response.FromString,
                )
        self.call_function = channel.unary_unary(
                '/beam_grpc.BeamService/call_function',
                request_serializer=beam__grpc__pb2.func_request.SerializeToString,
                response_deserializer=beam__grpc__pb2.pickled_response.FromString,
                )
        self.get_info = channel.unary_unary(
                '/beam_grpc.BeamService/get_info',
                request_serializer=beam__grpc__pb2.info_request.SerializeToString,
                response_deserializer=beam__grpc__pb2.info_response.FromString,
                )
        self.set_variable = channel.unary_unary(
                '/beam_grpc.BeamService/set_variable',
                request_serializer=beam__grpc__pb2.set_variable_request.SerializeToString,
                response_deserializer=beam__grpc__pb2.set_variable_response.FromString,
                )
        self.get_variable = channel.unary_unary(
                '/beam_grpc.BeamService/get_variable',
                request_serializer=beam__grpc__pb2.get_variable_request.SerializeToString,
                response_deserializer=beam__grpc__pb2.get_variable_response.FromString,
                )


class BeamServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def query_algorithm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def call_function(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_variable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_variable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BeamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'query_algorithm': grpc.unary_unary_rpc_method_handler(
                    servicer.query_algorithm,
                    request_deserializer=beam__grpc__pb2.method_request.FromString,
                    response_serializer=beam__grpc__pb2.pickled_response.SerializeToString,
            ),
            'call_function': grpc.unary_unary_rpc_method_handler(
                    servicer.call_function,
                    request_deserializer=beam__grpc__pb2.func_request.FromString,
                    response_serializer=beam__grpc__pb2.pickled_response.SerializeToString,
            ),
            'get_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_info,
                    request_deserializer=beam__grpc__pb2.info_request.FromString,
                    response_serializer=beam__grpc__pb2.info_response.SerializeToString,
            ),
            'set_variable': grpc.unary_unary_rpc_method_handler(
                    servicer.set_variable,
                    request_deserializer=beam__grpc__pb2.set_variable_request.FromString,
                    response_serializer=beam__grpc__pb2.set_variable_response.SerializeToString,
            ),
            'get_variable': grpc.unary_unary_rpc_method_handler(
                    servicer.get_variable,
                    request_deserializer=beam__grpc__pb2.get_variable_request.FromString,
                    response_serializer=beam__grpc__pb2.get_variable_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'beam_grpc.BeamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BeamService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def query_algorithm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/beam_grpc.BeamService/query_algorithm',
            beam__grpc__pb2.method_request.SerializeToString,
            beam__grpc__pb2.pickled_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def call_function(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/beam_grpc.BeamService/call_function',
            beam__grpc__pb2.func_request.SerializeToString,
            beam__grpc__pb2.pickled_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/beam_grpc.BeamService/get_info',
            beam__grpc__pb2.info_request.SerializeToString,
            beam__grpc__pb2.info_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_variable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/beam_grpc.BeamService/set_variable',
            beam__grpc__pb2.set_variable_request.SerializeToString,
            beam__grpc__pb2.set_variable_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_variable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/beam_grpc.BeamService/get_variable',
            beam__grpc__pb2.get_variable_request.SerializeToString,
            beam__grpc__pb2.get_variable_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
